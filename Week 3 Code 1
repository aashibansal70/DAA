// I. Given an unsorted array of integers, design an algorithm and a program to sort the array using insertion sort. Your program should be able to find number of comparisons and shifts (shifts total number of times the array elements are shifted from their place) required for sorting the array.

#include <iostream>
using namespace std;
void Insertion_sort(int a[], int size)
{
    int c = 0, s = 0;
    for (int i = 1; i < size; i++)
    {
        int temp = a[i];
        int j = i - 1;
        while (j >= 0 && a[j] > temp)
        {
            a[j + 1] = a[j];
            s++;
            c++;
            j--;
        }
        c++;
        a[j + 1] = temp;
    }

    for (int i = 0; i < size; i++)
        cout << a[i] << " ";
    cout << endl;
    cout << "Comparisons: " << c << endl;
    cout << "Shifts: " << s << endl;
}
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) cin >> a[i];
        Insertion_sort(a, n);
        cout << endl;
    }
    return 0;
}

//INPUT
3
8
-13 65 -21 76 46 89 45 12
10
54 65 34 76 78 97 46 32 51 21
15
63 42 223 645 652 31 324 22 553 12 54 65 86 46 325

//OUTPUT
-21 -13 12 45 46 65 76 89 
Comparisons: 20
Shifts: 13

21 32 34 46 51 54 65 76 78 97 
Comparisons: 37
Shifts: 28

12 22 31 42 46 54 63 65 86 223 324 325 553 645 652 
Comparisons: 68
Shifts: 54
